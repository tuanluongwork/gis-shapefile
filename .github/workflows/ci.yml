name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        compiler: [gcc, clang, msvc]
        exclude:
          - os: windows-latest
            compiler: gcc
          - os: windows-latest
            compiler: clang
          - os: ubuntu-latest
            compiler: msvc
          - os: macos-latest
            compiler: msvc
          - os: macos-latest
            compiler: gcc

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup C++ Environment
      uses: aminya/setup-cpp@v1
      with:
        compiler: ${{ matrix.compiler }}
        vcvarsall: ${{ contains(matrix.os, 'windows') }}
        cmake: true
        ninja: true

    - name: Configure CMake
      run: |
        cmake -B build -S . -DCMAKE_BUILD_TYPE=Release

    - name: Build
      run: |
        cmake --build build --config Release --parallel

    - name: Run Basic Tests
      run: |
        cd build
        # Test CLI tools with help output
        ./bin/shp-info --help || true
        ./bin/geocoder --help || true
        # Run basic example
        ./bin/example-basic

    - name: Run Performance Benchmarks
      if: matrix.os == 'ubuntu-latest' && matrix.compiler == 'gcc'
      run: |
        cd build
        ./bin/example-performance

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup C++ Environment
      uses: aminya/setup-cpp@v1
      with:
        compiler: gcc
        cmake: true
        cppcheck: true
        clang-tidy: true

    - name: Static Analysis
      run: |
        # Run cppcheck
        cppcheck --enable=all --std=c++17 src/ include/ --error-exitcode=1 || true
        
        # Configure with clang-tidy
        cmake -B build -S . -DCMAKE_CXX_CLANG_TIDY="clang-tidy;-checks=*,-readability-*"
        
        # Build with static analysis
        cmake --build build --config Release || true

  documentation:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Doxygen
      run: |
        sudo apt-get update
        sudo apt-get install -y doxygen graphviz

    - name: Generate Documentation
      run: |
        doxygen Doxyfile || echo "Doxygen config not found, skipping"

    - name: Check README
      run: |
        # Verify README has required sections
        grep -q "## Overview" README.md
        grep -q "## Quick Start" README.md
        grep -q "## Performance" README.md

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Security Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: cpp

    - name: Setup C++ Environment
      uses: aminya/setup-cpp@v1
      with:
        compiler: gcc
        cmake: true

    - name: Build for Analysis
      run: |
        cmake -B build -S . -DCMAKE_BUILD_TYPE=Debug
        cmake --build build --config Debug

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  package:
    needs: [build-and-test, code-quality]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup C++ Environment
      uses: aminya/setup-cpp@v1
      with:
        compiler: gcc
        cmake: true

    - name: Build Release Package
      run: |
        cmake -B build -S . -DCMAKE_BUILD_TYPE=Release
        cmake --build build --config Release
        cd build && cpack

    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: gis-shapefile-processor-${{ github.sha }}
        path: build/*.tar.gz
